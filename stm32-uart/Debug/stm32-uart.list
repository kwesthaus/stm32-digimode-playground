
stm32-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003760  08003760  00004760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c4  080037c4  00005074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037c4  080037c4  000047c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037cc  080037cc  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080037d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000074  08003848  00005074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003848  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d5d  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ef  00000000  00000000  0000de01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a0  00000000  00000000  0000fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002114c  00000000  00000000  000103f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000959d  00000000  00000000  0003153c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c88e6  00000000  00000000  0003aad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001033bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002230  00000000  00000000  00103404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00105634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003748 	.word	0x08003748

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08003748 	.word	0x08003748

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <UART_RxLine>:

// receive 1 character at a time until \r OR buffer is full
// \0 is written instead of \r
// \0 is not written if buffer is completely filled
// this function is blocking, and also does not properly handle HAL_ERROR
void UART_RxLine(UART_HandleTypeDef* huart, uint8_t *pData, uint16_t SpaceAvailable, uint16_t *RxLen) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4613      	mov	r3, r2
 80005ea:	80fb      	strh	r3, [r7, #6]
	char buf = '\0';
 80005ec:	2300      	movs	r3, #0
 80005ee:	75bb      	strb	r3, [r7, #22]
	*RxLen = 0;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	801a      	strh	r2, [r3, #0]

	while(*RxLen < SpaceAvailable) {
 80005f6:	e02d      	b.n	8000654 <UART_RxLine+0x78>
		HAL_StatusTypeDef res = HAL_TIMEOUT;
 80005f8:	2303      	movs	r3, #3
 80005fa:	75fb      	strb	r3, [r7, #23]
		while(res != HAL_OK) {
 80005fc:	e009      	b.n	8000612 <UART_RxLine+0x36>
			res = HAL_UART_Receive(huart, (uint8_t*)&buf, 1, HAL_MAX_DELAY);
 80005fe:	f107 0116 	add.w	r1, r7, #22
 8000602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000606:	2201      	movs	r2, #1
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f001 fc2a 	bl	8001e62 <HAL_UART_Receive>
 800060e:	4603      	mov	r3, r0
 8000610:	75fb      	strb	r3, [r7, #23]
		while(res != HAL_OK) {
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f2      	bne.n	80005fe <UART_RxLine+0x22>
		}
		if(buf == '\r') {
 8000618:	7dbb      	ldrb	r3, [r7, #22]
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d10d      	bne.n	800063a <UART_RxLine+0x5e>
			pData[*RxLen] = '\0';
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4413      	add	r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
			*RxLen += 1;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b29a      	uxth	r2, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	801a      	strh	r2, [r3, #0]
			break;
 8000638:	e012      	b.n	8000660 <UART_RxLine+0x84>
		}
		pData[*RxLen] = buf;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4413      	add	r3, r2
 8000644:	7dba      	ldrb	r2, [r7, #22]
 8000646:	701a      	strb	r2, [r3, #0]
		*RxLen += 1;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	801a      	strh	r2, [r3, #0]
	while(*RxLen < SpaceAvailable) {
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	88fa      	ldrh	r2, [r7, #6]
 800065a:	429a      	cmp	r2, r3
 800065c:	d8cc      	bhi.n	80005f8 <UART_RxLine+0x1c>
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fa12 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f836 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f8ca 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000678:	f000 f89e 	bl	80007b8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  memset(rxbuf, 0, sizeof(rxbuf));
 800067c:	220a      	movs	r2, #10
 800067e:	2100      	movs	r1, #0
 8000680:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <main+0x60>)
 8000682:	f002 fbe3 	bl	8002e4c <memset>
	  memset(message, 0, sizeof(message));
 8000686:	2228      	movs	r2, #40	@ 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4810      	ldr	r0, [pc, #64]	@ (80006cc <main+0x64>)
 800068c:	f002 fbde 	bl	8002e4c <memset>
	  HAL_UART_Transmit(&huart2, (uint8_t*)welcome, sizeof(welcome), HAL_MAX_DELAY);
 8000690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000694:	2215      	movs	r2, #21
 8000696:	490e      	ldr	r1, [pc, #56]	@ (80006d0 <main+0x68>)
 8000698:	480e      	ldr	r0, [pc, #56]	@ (80006d4 <main+0x6c>)
 800069a:	f001 fb57 	bl	8001d4c <HAL_UART_Transmit>
	  UART_RxLine(&huart2, (uint8_t*)rxbuf, sizeof(rxbuf)-1, &rcvd);
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <main+0x70>)
 80006a0:	2209      	movs	r2, #9
 80006a2:	4909      	ldr	r1, [pc, #36]	@ (80006c8 <main+0x60>)
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <main+0x6c>)
 80006a6:	f7ff ff99 	bl	80005dc <UART_RxLine>

	  sprintf(message, "\r\nWelcome to lab %s!\r\n", rxbuf);
 80006aa:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <main+0x60>)
 80006ac:	490b      	ldr	r1, [pc, #44]	@ (80006dc <main+0x74>)
 80006ae:	4807      	ldr	r0, [pc, #28]	@ (80006cc <main+0x64>)
 80006b0:	f002 fbaa 	bl	8002e08 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)message, sizeof(message), HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b8:	2228      	movs	r2, #40	@ 0x28
 80006ba:	4904      	ldr	r1, [pc, #16]	@ (80006cc <main+0x64>)
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <main+0x6c>)
 80006be:	f001 fb45 	bl	8001d4c <HAL_UART_Transmit>
	  memset(rxbuf, 0, sizeof(rxbuf));
 80006c2:	bf00      	nop
 80006c4:	e7da      	b.n	800067c <main+0x14>
 80006c6:	bf00      	nop
 80006c8:	200000d8 	.word	0x200000d8
 80006cc:	200000e4 	.word	0x200000e4
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000090 	.word	0x20000090
 80006d8:	2000010c 	.word	0x2000010c
 80006dc:	08003760 	.word	0x08003760

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2234      	movs	r2, #52	@ 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fbac 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <SystemClock_Config+0xd0>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a28      	ldr	r2, [pc, #160]	@ (80007b0 <SystemClock_Config+0xd0>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a21      	ldr	r2, [pc, #132]	@ (80007b4 <SystemClock_Config+0xd4>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000754:	2308      	movs	r3, #8
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000758:	2332      	movs	r3, #50	@ 0x32
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4618      	mov	r0, r3
 800076e:	f000 ffff 	bl	8001770 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000778:	f000 f862 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fd25 	bl	80011e8 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007a4:	f000 f84c 	bl	8000840 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	@ 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f001 fa5c 	bl	8001cac <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f821 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000090 	.word	0x20000090
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_GPIO_Init+0x30>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <MX_GPIO_Init+0x30>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_GPIO_Init+0x30>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000860:	6453      	str	r3, [r2, #68]	@ 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <HAL_UART_MspInit+0x94>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d133      	bne.n	8000926 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a14      	ldr	r2, [pc, #80]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <HAL_UART_MspInit+0x9c>)
 8000912:	f000 fad5 	bl	8000ec0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2026      	movs	r0, #38	@ 0x26
 800091c:	f000 fa07 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000920:	2026      	movs	r0, #38	@ 0x26
 8000922:	f000 fa20 	bl	8000d66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f8d1 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <USART2_IRQHandler+0x10>)
 80009a2:	f001 faf5 	bl	8001f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000090 	.word	0x20000090

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f002 fa3c 	bl	8002e5c <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000110 	.word	0x20000110
 8000a18:	20000260 	.word	0x20000260

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a44:	f7ff ffea 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f002 f9fb 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fdf9 	bl	8000668 <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a84:	080037d4 	.word	0x080037d4
  ldr r2, =_sbss
 8000a88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a8c:	20000260 	.word	0x20000260

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f92b 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fec0 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f943 	bl	8000d82 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b14:	f000 f90b 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000018 	.word	0x20000018
 8000b30:	20000020 	.word	0x20000020
 8000b34:	2000001c 	.word	0x2000001c

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000020 	.word	0x20000020
 8000b5c:	20000114 	.word	0x20000114

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000114 	.word	0x20000114

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	@ (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff feda 	bl	8000b60 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d008      	beq.n	8000dcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2280      	movs	r2, #128	@ 0x80
 8000dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e052      	b.n	8000e72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0216 	bic.w	r2, r2, #22
 8000dda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d103      	bne.n	8000dfc <HAL_DMA_Abort+0x62>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0208 	bic.w	r2, r2, #8
 8000e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0201 	bic.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e1c:	e013      	b.n	8000e46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e1e:	f7ff fe9f 	bl	8000b60 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d90c      	bls.n	8000e46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2203      	movs	r2, #3
 8000e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e015      	b.n	8000e72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1e4      	bne.n	8000e1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e58:	223f      	movs	r2, #63	@ 0x3f
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d004      	beq.n	8000e98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e00c      	b.n	8000eb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e165      	b.n	80011a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 8154 	bne.w	80011a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80ae 	beq.w	80011a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b5d      	ldr	r3, [pc, #372]	@ (80011c0 <HAL_GPIO_Init+0x300>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a5c      	ldr	r2, [pc, #368]	@ (80011c0 <HAL_GPIO_Init+0x300>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b5a      	ldr	r3, [pc, #360]	@ (80011c0 <HAL_GPIO_Init+0x300>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a58      	ldr	r2, [pc, #352]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4f      	ldr	r2, [pc, #316]	@ (80011c8 <HAL_GPIO_Init+0x308>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d025      	beq.n	80010da <HAL_GPIO_Init+0x21a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4e      	ldr	r2, [pc, #312]	@ (80011cc <HAL_GPIO_Init+0x30c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d01f      	beq.n	80010d6 <HAL_GPIO_Init+0x216>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4d      	ldr	r2, [pc, #308]	@ (80011d0 <HAL_GPIO_Init+0x310>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x212>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4c      	ldr	r2, [pc, #304]	@ (80011d4 <HAL_GPIO_Init+0x314>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x20e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <HAL_GPIO_Init+0x318>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x20a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	@ (80011dc <HAL_GPIO_Init+0x31c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x206>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a49      	ldr	r2, [pc, #292]	@ (80011e0 <HAL_GPIO_Init+0x320>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x202>
 80010be:	2306      	movs	r3, #6
 80010c0:	e00c      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e00a      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x21c>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	@ (80011c4 <HAL_GPIO_Init+0x304>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a31      	ldr	r2, [pc, #196]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119c:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <HAL_GPIO_Init+0x324>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f ae96 	bls.w	8000edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40021400 	.word	0x40021400
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0cc      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011fc:	4b68      	ldr	r3, [pc, #416]	@ (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d90c      	bls.n	8001224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b65      	ldr	r3, [pc, #404]	@ (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001212:	4b63      	ldr	r3, [pc, #396]	@ (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0b8      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800123c:	4b59      	ldr	r3, [pc, #356]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4a58      	ldr	r2, [pc, #352]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001246:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001254:	4b53      	ldr	r3, [pc, #332]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a52      	ldr	r2, [pc, #328]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800125e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001260:	4b50      	ldr	r3, [pc, #320]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	494d      	ldr	r1, [pc, #308]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	4313      	orrs	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d044      	beq.n	8001308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b47      	ldr	r3, [pc, #284]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d119      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e07f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d003      	beq.n	80012a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b3f      	ldr	r3, [pc, #252]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e067      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f023 0203 	bic.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4934      	ldr	r1, [pc, #208]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff fc42 	bl	8000b60 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff fc3e 	bl	8000b60 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e04f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	4b2b      	ldr	r3, [pc, #172]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 020c 	and.w	r2, r3, #12
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d1eb      	bne.n	80012e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d20c      	bcs.n	8001330 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e032      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4916      	ldr	r1, [pc, #88]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	490e      	ldr	r1, [pc, #56]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800136e:	f000 f855 	bl	800141c <HAL_RCC_GetSysClockFreq>
 8001372:	4602      	mov	r2, r0
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	490a      	ldr	r1, [pc, #40]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	5ccb      	ldrb	r3, [r1, r3]
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fba2 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00
 80013a4:	40023800 	.word	0x40023800
 80013a8:	08003778 	.word	0x08003778
 80013ac:	20000018 	.word	0x20000018
 80013b0:	2000001c 	.word	0x2000001c

080013b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000018 	.word	0x20000018

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d0:	f7ff fff0 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	0a9b      	lsrs	r3, r3, #10
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	@ (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	08003788 	.word	0x08003788

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff ffdc 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	0b5b      	lsrs	r3, r3, #13
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	@ (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	08003788 	.word	0x08003788

0800141c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800141c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001420:	b0a6      	sub	sp, #152	@ 0x98
 8001422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001442:	4bc8      	ldr	r3, [pc, #800]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b0c      	cmp	r3, #12
 800144c:	f200 817e 	bhi.w	800174c <HAL_RCC_GetSysClockFreq+0x330>
 8001450:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	0800148d 	.word	0x0800148d
 800145c:	0800174d 	.word	0x0800174d
 8001460:	0800174d 	.word	0x0800174d
 8001464:	0800174d 	.word	0x0800174d
 8001468:	08001495 	.word	0x08001495
 800146c:	0800174d 	.word	0x0800174d
 8001470:	0800174d 	.word	0x0800174d
 8001474:	0800174d 	.word	0x0800174d
 8001478:	0800149d 	.word	0x0800149d
 800147c:	0800174d 	.word	0x0800174d
 8001480:	0800174d 	.word	0x0800174d
 8001484:	0800174d 	.word	0x0800174d
 8001488:	08001607 	.word	0x08001607
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800148c:	4bb6      	ldr	r3, [pc, #728]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x34c>)
 800148e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001492:	e15f      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001494:	4bb5      	ldr	r3, [pc, #724]	@ (800176c <HAL_RCC_GetSysClockFreq+0x350>)
 8001496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800149a:	e15b      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800149c:	4bb1      	ldr	r3, [pc, #708]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014a8:	4bae      	ldr	r3, [pc, #696]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d031      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b4:	4bab      	ldr	r3, [pc, #684]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	2200      	movs	r2, #0
 80014bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80014c8:	2300      	movs	r3, #0
 80014ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80014cc:	4ba7      	ldr	r3, [pc, #668]	@ (800176c <HAL_RCC_GetSysClockFreq+0x350>)
 80014ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80014d2:	462a      	mov	r2, r5
 80014d4:	fb03 f202 	mul.w	r2, r3, r2
 80014d8:	2300      	movs	r3, #0
 80014da:	4621      	mov	r1, r4
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	4aa2      	ldr	r2, [pc, #648]	@ (800176c <HAL_RCC_GetSysClockFreq+0x350>)
 80014e4:	4621      	mov	r1, r4
 80014e6:	fba1 1202 	umull	r1, r2, r1, r2
 80014ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80014ec:	460a      	mov	r2, r1
 80014ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80014f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014f2:	4413      	add	r3, r2
 80014f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014fa:	2200      	movs	r2, #0
 80014fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001500:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001504:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001508:	f7fe fed2 	bl	80002b0 <__aeabi_uldivmod>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4613      	mov	r3, r2
 8001512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001516:	e064      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001518:	4b92      	ldr	r3, [pc, #584]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	2200      	movs	r2, #0
 8001520:	653b      	str	r3, [r7, #80]	@ 0x50
 8001522:	657a      	str	r2, [r7, #84]	@ 0x54
 8001524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800152c:	2300      	movs	r3, #0
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001530:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001534:	4622      	mov	r2, r4
 8001536:	462b      	mov	r3, r5
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	0159      	lsls	r1, r3, #5
 8001542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001546:	0150      	lsls	r0, r2, #5
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4621      	mov	r1, r4
 800154e:	1a51      	subs	r1, r2, r1
 8001550:	6139      	str	r1, [r7, #16]
 8001552:	4629      	mov	r1, r5
 8001554:	eb63 0301 	sbc.w	r3, r3, r1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001566:	4659      	mov	r1, fp
 8001568:	018b      	lsls	r3, r1, #6
 800156a:	4651      	mov	r1, sl
 800156c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001570:	4651      	mov	r1, sl
 8001572:	018a      	lsls	r2, r1, #6
 8001574:	4651      	mov	r1, sl
 8001576:	ebb2 0801 	subs.w	r8, r2, r1
 800157a:	4659      	mov	r1, fp
 800157c:	eb63 0901 	sbc.w	r9, r3, r1
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800158c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001590:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
 8001598:	4623      	mov	r3, r4
 800159a:	eb18 0303 	adds.w	r3, r8, r3
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	462b      	mov	r3, r5
 80015a2:	eb49 0303 	adc.w	r3, r9, r3
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015b4:	4629      	mov	r1, r5
 80015b6:	028b      	lsls	r3, r1, #10
 80015b8:	4621      	mov	r1, r4
 80015ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015be:	4621      	mov	r1, r4
 80015c0:	028a      	lsls	r2, r1, #10
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ca:	2200      	movs	r2, #0
 80015cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80015ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80015d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015d4:	f7fe fe6c 	bl	80002b0 <__aeabi_uldivmod>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4613      	mov	r3, r2
 80015de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015e2:	4b60      	ldr	r3, [pc, #384]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	3301      	adds	r3, #1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80015f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001600:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001604:	e0a6      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001606:	4b57      	ldr	r3, [pc, #348]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001612:	4b54      	ldr	r3, [pc, #336]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02a      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161e:	4b51      	ldr	r3, [pc, #324]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	2200      	movs	r2, #0
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001628:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800162a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800162c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001630:	2100      	movs	r1, #0
 8001632:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <HAL_RCC_GetSysClockFreq+0x350>)
 8001634:	fb03 f201 	mul.w	r2, r3, r1
 8001638:	2300      	movs	r3, #0
 800163a:	fb00 f303 	mul.w	r3, r0, r3
 800163e:	4413      	add	r3, r2
 8001640:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_RCC_GetSysClockFreq+0x350>)
 8001642:	fba0 1202 	umull	r1, r2, r0, r2
 8001646:	677a      	str	r2, [r7, #116]	@ 0x74
 8001648:	460a      	mov	r2, r1
 800164a:	673a      	str	r2, [r7, #112]	@ 0x70
 800164c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800164e:	4413      	add	r3, r2
 8001650:	677b      	str	r3, [r7, #116]	@ 0x74
 8001652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001656:	2200      	movs	r2, #0
 8001658:	633b      	str	r3, [r7, #48]	@ 0x30
 800165a:	637a      	str	r2, [r7, #52]	@ 0x34
 800165c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001660:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001664:	f7fe fe24 	bl	80002b0 <__aeabi_uldivmod>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4613      	mov	r3, r2
 800166e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001672:	e05b      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	2200      	movs	r2, #0
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800167e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 800168c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001690:	4642      	mov	r2, r8
 8001692:	464b      	mov	r3, r9
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	0159      	lsls	r1, r3, #5
 800169e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a2:	0150      	lsls	r0, r2, #5
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4641      	mov	r1, r8
 80016aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ae:	4649      	mov	r1, r9
 80016b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016c8:	ebb2 040a 	subs.w	r4, r2, sl
 80016cc:	eb63 050b 	sbc.w	r5, r3, fp
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	00eb      	lsls	r3, r5, #3
 80016da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016de:	00e2      	lsls	r2, r4, #3
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4643      	mov	r3, r8
 80016e6:	18e3      	adds	r3, r4, r3
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	464b      	mov	r3, r9
 80016ec:	eb45 0303 	adc.w	r3, r5, r3
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016fe:	4629      	mov	r1, r5
 8001700:	028b      	lsls	r3, r1, #10
 8001702:	4621      	mov	r1, r4
 8001704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001708:	4621      	mov	r1, r4
 800170a:	028a      	lsls	r2, r1, #10
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001714:	2200      	movs	r2, #0
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	61fa      	str	r2, [r7, #28]
 800171a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800171e:	f7fe fdc7 	bl	80002b0 <__aeabi_uldivmod>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4613      	mov	r3, r2
 8001728:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x348>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	0f1b      	lsrs	r3, r3, #28
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800173a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800173e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800174a:	e003      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x34c>)
 800174e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001752:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001758:	4618      	mov	r0, r3
 800175a:	3798      	adds	r7, #152	@ 0x98
 800175c:	46bd      	mov	sp, r7
 800175e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	00f42400 	.word	0x00f42400
 800176c:	017d7840 	.word	0x017d7840

08001770 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e28d      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8083 	beq.w	8001896 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001790:	4b94      	ldr	r3, [pc, #592]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b04      	cmp	r3, #4
 800179a:	d019      	beq.n	80017d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800179c:	4b91      	ldr	r3, [pc, #580]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017a8:	4b8e      	ldr	r3, [pc, #568]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017b4:	d00c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b6:	4b8b      	ldr	r3, [pc, #556]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d112      	bne.n	80017e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4b88      	ldr	r3, [pc, #544]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017ce:	d10b      	bne.n	80017e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	4b84      	ldr	r3, [pc, #528]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d05b      	beq.n	8001894 <HAL_RCC_OscConfig+0x124>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d157      	bne.n	8001894 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e25a      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f0:	d106      	bne.n	8001800 <HAL_RCC_OscConfig+0x90>
 80017f2:	4b7c      	ldr	r3, [pc, #496]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7b      	ldr	r2, [pc, #492]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xcc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xb4>
 800180a:	4b76      	ldr	r3, [pc, #472]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a75      	ldr	r2, [pc, #468]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b73      	ldr	r3, [pc, #460]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a72      	ldr	r2, [pc, #456]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xcc>
 8001824:	4b6f      	ldr	r3, [pc, #444]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6e      	ldr	r2, [pc, #440]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b6c      	ldr	r3, [pc, #432]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6b      	ldr	r2, [pc, #428]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f98c 	bl	8000b60 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff f988 	bl	8000b60 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e21f      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b61      	ldr	r3, [pc, #388]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xdc>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f978 	bl	8000b60 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff f974 	bl	8000b60 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e20b      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x104>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d06f      	beq.n	8001982 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018a2:	4b50      	ldr	r3, [pc, #320]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d017      	beq.n	80018de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ae:	4b4d      	ldr	r3, [pc, #308]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ba:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d11c      	bne.n	800190c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d2:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x186>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1d3      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4937      	ldr	r1, [pc, #220]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	e03a      	b.n	8001982 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_RCC_OscConfig+0x278>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff f921 	bl	8000b60 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff f91d 	bl	8000b60 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1b4      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4925      	ldr	r1, [pc, #148]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_OscConfig+0x278>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f900 	bl	8000b60 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff f8fc 	bl	8000b60 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e193      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d036      	beq.n	80019fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d016      	beq.n	80019c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f8e0 	bl	8000b60 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff f8dc 	bl	8000b60 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e173      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80019b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x234>
 80019c2:	e01b      	b.n	80019fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_OscConfig+0x27c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff f8c9 	bl	8000b60 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	e00e      	b.n	80019f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff f8c5 	bl	8000b60 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d907      	bls.n	80019f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e15c      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	42470000 	.word	0x42470000
 80019ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b8a      	ldr	r3, [pc, #552]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 80019f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ea      	bne.n	80019d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8097 	beq.w	8001b38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	4a7e      	ldr	r2, [pc, #504]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b79      	ldr	r3, [pc, #484]	@ (8001c20 <HAL_RCC_OscConfig+0x4b0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b76      	ldr	r3, [pc, #472]	@ (8001c20 <HAL_RCC_OscConfig+0x4b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a75      	ldr	r2, [pc, #468]	@ (8001c20 <HAL_RCC_OscConfig+0x4b0>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7ff f885 	bl	8000b60 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff f881 	bl	8000b60 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e118      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c20 <HAL_RCC_OscConfig+0x4b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x31e>
 8001a80:	4b66      	ldr	r3, [pc, #408]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a65      	ldr	r2, [pc, #404]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x358>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x340>
 8001a96:	4b61      	ldr	r3, [pc, #388]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	4a60      	ldr	r2, [pc, #384]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x358>
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a59      	ldr	r2, [pc, #356]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001abc:	4b57      	ldr	r3, [pc, #348]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac0:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d015      	beq.n	8001afc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f846 	bl	8000b60 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f842 	bl	8000b60 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0d7      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	4b4b      	ldr	r3, [pc, #300]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ee      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x368>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff f830 	bl	8000b60 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f82c 	bl	8000b60 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0c1      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1a:	4b40      	ldr	r3, [pc, #256]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ee      	bne.n	8001b04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	4a3a      	ldr	r2, [pc, #232]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ad 	beq.w	8001c9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b42:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d060      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d145      	bne.n	8001be2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <HAL_RCC_OscConfig+0x4b4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f800 	bl	8000b60 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7fe fffc 	bl	8000b60 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e093      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	071b      	lsls	r3, r3, #28
 8001bae:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCC_OscConfig+0x4b4>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7fe ffd1 	bl	8000b60 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7fe ffcd 	bl	8000b60 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e064      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x452>
 8001be0:	e05c      	b.n	8001c9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_RCC_OscConfig+0x4b4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7fe ffba 	bl	8000b60 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe ffb6 	bl	8000b60 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04d      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x480>
 8001c0e:	e045      	b.n	8001c9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e040      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000
 8001c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <HAL_RCC_OscConfig+0x538>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d030      	beq.n	8001c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d129      	bne.n	8001c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d122      	bne.n	8001c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d119      	bne.n	8001c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	3b01      	subs	r3, #1
 8001c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10f      	bne.n	8001c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e042      	b.n	8001d44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fde2 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2224      	movs	r2, #36	@ 0x24
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fe15 	bl	8002920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d175      	bne.n	8001e58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_UART_Transmit+0x2c>
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e06e      	b.n	8001e5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2221      	movs	r2, #33	@ 0x21
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d8a:	f7fe fee9 	bl	8000b60 <HAL_GetTick>
 8001d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001da4:	d108      	bne.n	8001db8 <HAL_UART_Transmit+0x6c>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	e003      	b.n	8001dc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dc0:	e02e      	b.n	8001e20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	@ 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fbb3 	bl	8002538 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e03a      	b.n	8001e5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e007      	b.n	8001e12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1cb      	bne.n	8001dc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2140      	movs	r1, #64	@ 0x40
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fb7f 	bl	8002538 <UART_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e006      	b.n	8001e5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	@ 0x28
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f040 8081 	bne.w	8001f86 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Receive+0x2e>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e079      	b.n	8001f88 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2222      	movs	r2, #34	@ 0x22
 8001e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fe5a 	bl	8000b60 <HAL_GetTick>
 8001eac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	88fa      	ldrh	r2, [r7, #6]
 8001eb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec2:	d108      	bne.n	8001ed6 <HAL_UART_Receive+0x74>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e003      	b.n	8001ede <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ede:	e047      	b.n	8001f70 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2120      	movs	r1, #32
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fb24 	bl	8002538 <UART_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e042      	b.n	8001f88 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	e01f      	b.n	8001f62 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2a:	d007      	beq.n	8001f3c <HAL_UART_Receive+0xda>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_UART_Receive+0xe8>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d106      	bne.n	8001f4a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e008      	b.n	8001f5c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1b2      	bne.n	8001ee0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0ba      	sub	sp, #232	@ 0xe8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x66>
 8001fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fbd7 	bl	80027a2 <UART_Receive_IT>
      return;
 8001ff4:	e273      	b.n	80024de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80de 	beq.w	80021bc <HAL_UART_IRQHandler+0x22c>
 8002000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800200c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002010:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80d1 	beq.w	80021bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800201a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_UART_IRQHandler+0xae>
 8002026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800202a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800203e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_UART_IRQHandler+0xd2>
 800204a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f043 0202 	orr.w	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_UART_IRQHandler+0xf6>
 800206e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f043 0204 	orr.w	r2, r3, #4
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d011      	beq.n	80020b6 <HAL_UART_IRQHandler+0x126>
 8002092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800209e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f043 0208 	orr.w	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 820a 	beq.w	80024d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_UART_IRQHandler+0x14e>
 80020cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fb62 	bl	80027a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	2b40      	cmp	r3, #64	@ 0x40
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <HAL_UART_IRQHandler+0x17a>
 8002102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d04f      	beq.n	80021aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fa6d 	bl	80025ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211a:	2b40      	cmp	r3, #64	@ 0x40
 800211c:	d141      	bne.n	80021a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3314      	adds	r3, #20
 8002124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800212c:	e853 3f00 	ldrex	r3, [r3]
 8002130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800213c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3314      	adds	r3, #20
 8002146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800214a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800214e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800215a:	e841 2300 	strex	r3, r2, [r1]
 800215e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1d9      	bne.n	800211e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d013      	beq.n	800219a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002176:	4a8a      	ldr	r2, [pc, #552]	@ (80023a0 <HAL_UART_IRQHandler+0x410>)
 8002178:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fe7b 	bl	8000e7a <HAL_DMA_Abort_IT>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002194:	4610      	mov	r0, r2
 8002196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002198:	e00e      	b.n	80021b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f9b6 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a0:	e00a      	b.n	80021b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f9b2 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a8:	e006      	b.n	80021b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f9ae 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021b6:	e18d      	b.n	80024d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b8:	bf00      	nop
    return;
 80021ba:	e18b      	b.n	80024d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f040 8167 	bne.w	8002494 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8160 	beq.w	8002494 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80021d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8159 	beq.w	8002494 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	2b40      	cmp	r3, #64	@ 0x40
 8002204:	f040 80ce 	bne.w	80023a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a9 	beq.w	8002370 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002226:	429a      	cmp	r2, r3
 8002228:	f080 80a2 	bcs.w	8002370 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002232:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800223e:	f000 8088 	beq.w	8002352 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002250:	e853 3f00 	ldrex	r3, [r3]
 8002254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800225c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	330c      	adds	r3, #12
 800226a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800226e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002276:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800227a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800227e:	e841 2300 	strex	r3, r2, [r1]
 8002282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1d9      	bne.n	8002242 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3314      	adds	r3, #20
 8002294:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002298:	e853 3f00 	ldrex	r3, [r3]
 800229c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800229e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3314      	adds	r3, #20
 80022ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e1      	bne.n	800228e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3314      	adds	r3, #20
 80022d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022d4:	e853 3f00 	ldrex	r3, [r3]
 80022d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022f6:	e841 2300 	strex	r3, r2, [r1]
 80022fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80022fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e3      	bne.n	80022ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002322:	f023 0310 	bic.w	r3, r3, #16
 8002326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002334:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002336:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002338:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800233a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800233c:	e841 2300 	strex	r3, r2, [r1]
 8002340:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e3      	bne.n	8002310 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fd24 	bl	8000d9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002360:	b29b      	uxth	r3, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b29b      	uxth	r3, r3
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f8d9 	bl	8002520 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800236e:	e0b3      	b.n	80024d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 80ad 	bne.w	80024d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002388:	f040 80a6 	bne.w	80024d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8c1 	bl	8002520 <HAL_UARTEx_RxEventCallback>
      return;
 800239e:	e09b      	b.n	80024d8 <HAL_UART_IRQHandler+0x548>
 80023a0:	080026b1 	.word	0x080026b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 808e 	beq.w	80024dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80023c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8089 	beq.w	80024dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80023f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e3      	bne.n	80023ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	623b      	str	r3, [r7, #32]
   return(result);
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3314      	adds	r3, #20
 8002422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002426:	633a      	str	r2, [r7, #48]	@ 0x30
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800242c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e3      	bne.n	8002402 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	60fb      	str	r3, [r7, #12]
   return(result);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0310 	bic.w	r3, r3, #16
 800245e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	617b      	str	r3, [r7, #20]
   return(result);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e3      	bne.n	8002448 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f847 	bl	8002520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002492:	e023      	b.n	80024dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_UART_IRQHandler+0x524>
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f910 	bl	80026d2 <UART_Transmit_IT>
    return;
 80024b2:	e014      	b.n	80024de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <HAL_UART_IRQHandler+0x54e>
 80024c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f950 	bl	8002772 <UART_EndTransmit_IT>
    return;
 80024d2:	e004      	b.n	80024de <HAL_UART_IRQHandler+0x54e>
    return;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <HAL_UART_IRQHandler+0x54e>
      return;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <HAL_UART_IRQHandler+0x54e>
      return;
 80024dc:	bf00      	nop
  }
}
 80024de:	37e8      	adds	r7, #232	@ 0xe8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002548:	e03b      	b.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002550:	d037      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7fe fb05 	bl	8000b60 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <UART_WaitOnFlagUntilTimeout+0x30>
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e03a      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d023      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b80      	cmp	r3, #128	@ 0x80
 800257e:	d020      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b40      	cmp	r3, #64	@ 0x40
 8002584:	d01d      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d116      	bne.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f81d 	bl	80025ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2208      	movs	r2, #8
 80025b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d0b4      	beq.n	800254a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b095      	sub	sp, #84	@ 0x54
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002612:	643a      	str	r2, [r7, #64]	@ 0x40
 8002614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e5      	bne.n	80025f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3314      	adds	r3, #20
 800262c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	61fb      	str	r3, [r7, #28]
   return(result);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3314      	adds	r3, #20
 8002644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800264c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e5      	bne.n	8002626 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	2b01      	cmp	r3, #1
 8002660:	d119      	bne.n	8002696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	60bb      	str	r3, [r7, #8]
   return(result);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f023 0310 	bic.w	r3, r3, #16
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002682:	61ba      	str	r2, [r7, #24]
 8002684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	613b      	str	r3, [r7, #16]
   return(result);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e5      	bne.n	8002662 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026a4:	bf00      	nop
 80026a6:	3754      	adds	r7, #84	@ 0x54
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ff21 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b21      	cmp	r3, #33	@ 0x21
 80026e4:	d13e      	bne.n	8002764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ee:	d114      	bne.n	800271a <UART_Transmit_IT+0x48>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d110      	bne.n	800271a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]
 8002718:	e008      	b.n	800272c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6211      	str	r1, [r2, #32]
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fea6 	bl	80024e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08c      	sub	sp, #48	@ 0x30
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b22      	cmp	r3, #34	@ 0x22
 80027bc:	f040 80aa 	bne.w	8002914 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c8:	d115      	bne.n	80027f6 <UART_Receive_IT+0x54>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d111      	bne.n	80027f6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f4:	e024      	b.n	8002840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002804:	d007      	beq.n	8002816 <UART_Receive_IT+0x74>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <UART_Receive_IT+0x82>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e008      	b.n	8002836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002830:	b2da      	uxtb	r2, r3
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002850:	2b00      	cmp	r3, #0
 8002852:	d15d      	bne.n	8002910 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0220 	bic.w	r2, r2, #32
 8002862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	2b01      	cmp	r3, #1
 8002898:	d135      	bne.n	8002906 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	e853 3f00 	ldrex	r3, [r3]
 80028ae:	613b      	str	r3, [r7, #16]
   return(result);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f023 0310 	bic.w	r3, r3, #16
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	623a      	str	r2, [r7, #32]
 80028c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	69f9      	ldr	r1, [r7, #28]
 80028c6:	6a3a      	ldr	r2, [r7, #32]
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e5      	bne.n	80028a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d10a      	bne.n	80028f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fe0e 	bl	8002520 <HAL_UARTEx_RxEventCallback>
 8002904:	e002      	b.n	800290c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fdf6 	bl	80024f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e002      	b.n	8002916 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3730      	adds	r7, #48	@ 0x30
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002924:	b0c0      	sub	sp, #256	@ 0x100
 8002926:	af00      	add	r7, sp, #0
 8002928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	68d9      	ldr	r1, [r3, #12]
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	ea40 0301 	orr.w	r3, r0, r1
 8002948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002978:	f021 010c 	bic.w	r1, r1, #12
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002986:	430b      	orrs	r3, r1
 8002988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	6999      	ldr	r1, [r3, #24]
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	ea40 0301 	orr.w	r3, r0, r1
 80029a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b8f      	ldr	r3, [pc, #572]	@ (8002bec <UART_SetConfig+0x2cc>)
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d005      	beq.n	80029c0 <UART_SetConfig+0xa0>
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf0 <UART_SetConfig+0x2d0>)
 80029bc:	429a      	cmp	r2, r3
 80029be:	d104      	bne.n	80029ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c0:	f7fe fd18 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 80029c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029c8:	e003      	b.n	80029d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ca:	f7fe fcff 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80029ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029dc:	f040 810c 	bne.w	8002bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029fa:	415b      	adcs	r3, r3
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a02:	4621      	mov	r1, r4
 8002a04:	eb12 0801 	adds.w	r8, r2, r1
 8002a08:	4629      	mov	r1, r5
 8002a0a:	eb43 0901 	adc.w	r9, r3, r1
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a22:	4690      	mov	r8, r2
 8002a24:	4699      	mov	r9, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	eb18 0303 	adds.w	r3, r8, r3
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a30:	462b      	mov	r3, r5
 8002a32:	eb49 0303 	adc.w	r3, r9, r3
 8002a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a4e:	460b      	mov	r3, r1
 8002a50:	18db      	adds	r3, r3, r3
 8002a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a54:	4613      	mov	r3, r2
 8002a56:	eb42 0303 	adc.w	r3, r2, r3
 8002a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a64:	f7fd fc24 	bl	80002b0 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	011c      	lsls	r4, r3, #4
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a90:	415b      	adcs	r3, r3
 8002a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a98:	4641      	mov	r1, r8
 8002a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab8:	4692      	mov	sl, r2
 8002aba:	469b      	mov	fp, r3
 8002abc:	4643      	mov	r3, r8
 8002abe:	eb1a 0303 	adds.w	r3, sl, r3
 8002ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8002acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002afa:	f7fd fbd9 	bl	80002b0 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002b06:	fba3 2301 	umull	r2, r3, r3, r1
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2264      	movs	r2, #100	@ 0x64
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	1acb      	subs	r3, r1, r3
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b1a:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b28:	441c      	add	r4, r3
 8002b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b44:	415b      	adcs	r3, r3
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	1851      	adds	r1, r2, r1
 8002b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b52:	4649      	mov	r1, r9
 8002b54:	414b      	adcs	r3, r1
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b64:	4659      	mov	r1, fp
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6e:	4651      	mov	r1, sl
 8002b70:	00ca      	lsls	r2, r1, #3
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	4642      	mov	r2, r8
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b80:	464b      	mov	r3, r9
 8002b82:	460a      	mov	r2, r1
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	18db      	adds	r3, r3, r3
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	eb42 0303 	adc.w	r3, r2, r3
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bb6:	f7fd fb7b 	bl	80002b0 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	@ 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	3332      	adds	r3, #50	@ 0x32
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 0207 	and.w	r2, r3, #7
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4422      	add	r2, r4
 8002be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be8:	e106      	b.n	8002df8 <UART_SetConfig+0x4d8>
 8002bea:	bf00      	nop
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	1891      	adds	r1, r2, r2
 8002c10:	6239      	str	r1, [r7, #32]
 8002c12:	415b      	adcs	r3, r3
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	1854      	adds	r4, r2, r1
 8002c1e:	4649      	mov	r1, r9
 8002c20:	eb43 0501 	adc.w	r5, r3, r1
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	00eb      	lsls	r3, r5, #3
 8002c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c32:	00e2      	lsls	r2, r4, #3
 8002c34:	4614      	mov	r4, r2
 8002c36:	461d      	mov	r5, r3
 8002c38:	4643      	mov	r3, r8
 8002c3a:	18e3      	adds	r3, r4, r3
 8002c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c40:	464b      	mov	r3, r9
 8002c42:	eb45 0303 	adc.w	r3, r5, r3
 8002c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c66:	4629      	mov	r1, r5
 8002c68:	008b      	lsls	r3, r1, #2
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c70:	4621      	mov	r1, r4
 8002c72:	008a      	lsls	r2, r1, #2
 8002c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c78:	f7fd fb1a 	bl	80002b0 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4b60      	ldr	r3, [pc, #384]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011c      	lsls	r4, r3, #4
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	61b9      	str	r1, [r7, #24]
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cac:	4641      	mov	r1, r8
 8002cae:	1851      	adds	r1, r2, r1
 8002cb0:	6139      	str	r1, [r7, #16]
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	414b      	adcs	r3, r1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4651      	mov	r1, sl
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4642      	mov	r2, r8
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d04:	4649      	mov	r1, r9
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0e:	4641      	mov	r1, r8
 8002d10:	008a      	lsls	r2, r1, #2
 8002d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d16:	f7fd facb 	bl	80002b0 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002d22:	fba3 2301 	umull	r2, r3, r3, r1
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2264      	movs	r2, #100	@ 0x64
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	1acb      	subs	r3, r1, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	@ 0x32
 8002d34:	4a33      	ldr	r2, [pc, #204]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d40:	441c      	add	r4, r3
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d92:	464b      	mov	r3, r9
 8002d94:	460a      	mov	r2, r1
 8002d96:	eb42 0303 	adc.w	r3, r2, r3
 8002d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002db4:	4649      	mov	r1, r9
 8002db6:	008b      	lsls	r3, r1, #2
 8002db8:	4641      	mov	r1, r8
 8002dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	008a      	lsls	r2, r1, #2
 8002dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dc6:	f7fd fa73 	bl	80002b0 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	@ 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	3332      	adds	r3, #50	@ 0x32
 8002de2:	4a08      	ldr	r2, [pc, #32]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4422      	add	r2, r4
 8002df6:	609a      	str	r2, [r3, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e04:	51eb851f 	.word	0x51eb851f

08002e08 <siprintf>:
 8002e08:	b40e      	push	{r1, r2, r3}
 8002e0a:	b510      	push	{r4, lr}
 8002e0c:	b09d      	sub	sp, #116	@ 0x74
 8002e0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002e10:	9002      	str	r0, [sp, #8]
 8002e12:	9006      	str	r0, [sp, #24]
 8002e14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e18:	480a      	ldr	r0, [pc, #40]	@ (8002e44 <siprintf+0x3c>)
 8002e1a:	9107      	str	r1, [sp, #28]
 8002e1c:	9104      	str	r1, [sp, #16]
 8002e1e:	490a      	ldr	r1, [pc, #40]	@ (8002e48 <siprintf+0x40>)
 8002e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e24:	9105      	str	r1, [sp, #20]
 8002e26:	2400      	movs	r4, #0
 8002e28:	a902      	add	r1, sp, #8
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002e30:	f000 f994 	bl	800315c <_svfiprintf_r>
 8002e34:	9b02      	ldr	r3, [sp, #8]
 8002e36:	701c      	strb	r4, [r3, #0]
 8002e38:	b01d      	add	sp, #116	@ 0x74
 8002e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e3e:	b003      	add	sp, #12
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000024 	.word	0x20000024
 8002e48:	ffff0208 	.word	0xffff0208

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <__errno>:
 8002e5c:	4b01      	ldr	r3, [pc, #4]	@ (8002e64 <__errno+0x8>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000024 	.word	0x20000024

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ea0 <__libc_init_array+0x38>)
 8002e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8002ea4 <__libc_init_array+0x3c>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	2600      	movs	r6, #0
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	4d0b      	ldr	r5, [pc, #44]	@ (8002ea8 <__libc_init_array+0x40>)
 8002e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8002eac <__libc_init_array+0x44>)
 8002e7c:	f000 fc64 	bl	8003748 <_init>
 8002e80:	1b64      	subs	r4, r4, r5
 8002e82:	10a4      	asrs	r4, r4, #2
 8002e84:	2600      	movs	r6, #0
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	080037cc 	.word	0x080037cc
 8002ea4:	080037cc 	.word	0x080037cc
 8002ea8:	080037cc 	.word	0x080037cc
 8002eac:	080037d0 	.word	0x080037d0

08002eb0 <__retarget_lock_acquire_recursive>:
 8002eb0:	4770      	bx	lr

08002eb2 <__retarget_lock_release_recursive>:
 8002eb2:	4770      	bx	lr

08002eb4 <_free_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	d041      	beq.n	8002f40 <_free_r+0x8c>
 8002ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec0:	1f0c      	subs	r4, r1, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bfb8      	it	lt
 8002ec6:	18e4      	addlt	r4, r4, r3
 8002ec8:	f000 f8e0 	bl	800308c <__malloc_lock>
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <_free_r+0x90>)
 8002ece:	6813      	ldr	r3, [r2, #0]
 8002ed0:	b933      	cbnz	r3, 8002ee0 <_free_r+0x2c>
 8002ed2:	6063      	str	r3, [r4, #4]
 8002ed4:	6014      	str	r4, [r2, #0]
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002edc:	f000 b8dc 	b.w	8003098 <__malloc_unlock>
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	d908      	bls.n	8002ef6 <_free_r+0x42>
 8002ee4:	6820      	ldr	r0, [r4, #0]
 8002ee6:	1821      	adds	r1, r4, r0
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	bf01      	itttt	eq
 8002eec:	6819      	ldreq	r1, [r3, #0]
 8002eee:	685b      	ldreq	r3, [r3, #4]
 8002ef0:	1809      	addeq	r1, r1, r0
 8002ef2:	6021      	streq	r1, [r4, #0]
 8002ef4:	e7ed      	b.n	8002ed2 <_free_r+0x1e>
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b10b      	cbz	r3, 8002f00 <_free_r+0x4c>
 8002efc:	42a3      	cmp	r3, r4
 8002efe:	d9fa      	bls.n	8002ef6 <_free_r+0x42>
 8002f00:	6811      	ldr	r1, [r2, #0]
 8002f02:	1850      	adds	r0, r2, r1
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	d10b      	bne.n	8002f20 <_free_r+0x6c>
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	4401      	add	r1, r0
 8002f0c:	1850      	adds	r0, r2, r1
 8002f0e:	4283      	cmp	r3, r0
 8002f10:	6011      	str	r1, [r2, #0]
 8002f12:	d1e0      	bne.n	8002ed6 <_free_r+0x22>
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6053      	str	r3, [r2, #4]
 8002f1a:	4408      	add	r0, r1
 8002f1c:	6010      	str	r0, [r2, #0]
 8002f1e:	e7da      	b.n	8002ed6 <_free_r+0x22>
 8002f20:	d902      	bls.n	8002f28 <_free_r+0x74>
 8002f22:	230c      	movs	r3, #12
 8002f24:	602b      	str	r3, [r5, #0]
 8002f26:	e7d6      	b.n	8002ed6 <_free_r+0x22>
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	1821      	adds	r1, r4, r0
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	bf04      	itt	eq
 8002f30:	6819      	ldreq	r1, [r3, #0]
 8002f32:	685b      	ldreq	r3, [r3, #4]
 8002f34:	6063      	str	r3, [r4, #4]
 8002f36:	bf04      	itt	eq
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	6054      	str	r4, [r2, #4]
 8002f3e:	e7ca      	b.n	8002ed6 <_free_r+0x22>
 8002f40:	bd38      	pop	{r3, r4, r5, pc}
 8002f42:	bf00      	nop
 8002f44:	2000025c 	.word	0x2000025c

08002f48 <sbrk_aligned>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8002f88 <sbrk_aligned+0x40>)
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	6831      	ldr	r1, [r6, #0]
 8002f50:	4605      	mov	r5, r0
 8002f52:	b911      	cbnz	r1, 8002f5a <sbrk_aligned+0x12>
 8002f54:	f000 fba4 	bl	80036a0 <_sbrk_r>
 8002f58:	6030      	str	r0, [r6, #0]
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 fb9f 	bl	80036a0 <_sbrk_r>
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	d103      	bne.n	8002f6e <sbrk_aligned+0x26>
 8002f66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
 8002f6e:	1cc4      	adds	r4, r0, #3
 8002f70:	f024 0403 	bic.w	r4, r4, #3
 8002f74:	42a0      	cmp	r0, r4
 8002f76:	d0f8      	beq.n	8002f6a <sbrk_aligned+0x22>
 8002f78:	1a21      	subs	r1, r4, r0
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 fb90 	bl	80036a0 <_sbrk_r>
 8002f80:	3001      	adds	r0, #1
 8002f82:	d1f2      	bne.n	8002f6a <sbrk_aligned+0x22>
 8002f84:	e7ef      	b.n	8002f66 <sbrk_aligned+0x1e>
 8002f86:	bf00      	nop
 8002f88:	20000258 	.word	0x20000258

08002f8c <_malloc_r>:
 8002f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f90:	1ccd      	adds	r5, r1, #3
 8002f92:	f025 0503 	bic.w	r5, r5, #3
 8002f96:	3508      	adds	r5, #8
 8002f98:	2d0c      	cmp	r5, #12
 8002f9a:	bf38      	it	cc
 8002f9c:	250c      	movcc	r5, #12
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	4606      	mov	r6, r0
 8002fa2:	db01      	blt.n	8002fa8 <_malloc_r+0x1c>
 8002fa4:	42a9      	cmp	r1, r5
 8002fa6:	d904      	bls.n	8002fb2 <_malloc_r+0x26>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	6033      	str	r3, [r6, #0]
 8002fac:	2000      	movs	r0, #0
 8002fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003088 <_malloc_r+0xfc>
 8002fb6:	f000 f869 	bl	800308c <__malloc_lock>
 8002fba:	f8d8 3000 	ldr.w	r3, [r8]
 8002fbe:	461c      	mov	r4, r3
 8002fc0:	bb44      	cbnz	r4, 8003014 <_malloc_r+0x88>
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f7ff ffbf 	bl	8002f48 <sbrk_aligned>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	4604      	mov	r4, r0
 8002fce:	d158      	bne.n	8003082 <_malloc_r+0xf6>
 8002fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8002fd4:	4627      	mov	r7, r4
 8002fd6:	2f00      	cmp	r7, #0
 8002fd8:	d143      	bne.n	8003062 <_malloc_r+0xd6>
 8002fda:	2c00      	cmp	r4, #0
 8002fdc:	d04b      	beq.n	8003076 <_malloc_r+0xea>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	4639      	mov	r1, r7
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	eb04 0903 	add.w	r9, r4, r3
 8002fe8:	f000 fb5a 	bl	80036a0 <_sbrk_r>
 8002fec:	4581      	cmp	r9, r0
 8002fee:	d142      	bne.n	8003076 <_malloc_r+0xea>
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	1a6d      	subs	r5, r5, r1
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f7ff ffa6 	bl	8002f48 <sbrk_aligned>
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d03a      	beq.n	8003076 <_malloc_r+0xea>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	442b      	add	r3, r5
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	f8d8 3000 	ldr.w	r3, [r8]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	bb62      	cbnz	r2, 8003068 <_malloc_r+0xdc>
 800300e:	f8c8 7000 	str.w	r7, [r8]
 8003012:	e00f      	b.n	8003034 <_malloc_r+0xa8>
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	1b52      	subs	r2, r2, r5
 8003018:	d420      	bmi.n	800305c <_malloc_r+0xd0>
 800301a:	2a0b      	cmp	r2, #11
 800301c:	d917      	bls.n	800304e <_malloc_r+0xc2>
 800301e:	1961      	adds	r1, r4, r5
 8003020:	42a3      	cmp	r3, r4
 8003022:	6025      	str	r5, [r4, #0]
 8003024:	bf18      	it	ne
 8003026:	6059      	strne	r1, [r3, #4]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	bf08      	it	eq
 800302c:	f8c8 1000 	streq.w	r1, [r8]
 8003030:	5162      	str	r2, [r4, r5]
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	4630      	mov	r0, r6
 8003036:	f000 f82f 	bl	8003098 <__malloc_unlock>
 800303a:	f104 000b 	add.w	r0, r4, #11
 800303e:	1d23      	adds	r3, r4, #4
 8003040:	f020 0007 	bic.w	r0, r0, #7
 8003044:	1ac2      	subs	r2, r0, r3
 8003046:	bf1c      	itt	ne
 8003048:	1a1b      	subne	r3, r3, r0
 800304a:	50a3      	strne	r3, [r4, r2]
 800304c:	e7af      	b.n	8002fae <_malloc_r+0x22>
 800304e:	6862      	ldr	r2, [r4, #4]
 8003050:	42a3      	cmp	r3, r4
 8003052:	bf0c      	ite	eq
 8003054:	f8c8 2000 	streq.w	r2, [r8]
 8003058:	605a      	strne	r2, [r3, #4]
 800305a:	e7eb      	b.n	8003034 <_malloc_r+0xa8>
 800305c:	4623      	mov	r3, r4
 800305e:	6864      	ldr	r4, [r4, #4]
 8003060:	e7ae      	b.n	8002fc0 <_malloc_r+0x34>
 8003062:	463c      	mov	r4, r7
 8003064:	687f      	ldr	r7, [r7, #4]
 8003066:	e7b6      	b.n	8002fd6 <_malloc_r+0x4a>
 8003068:	461a      	mov	r2, r3
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	42a3      	cmp	r3, r4
 800306e:	d1fb      	bne.n	8003068 <_malloc_r+0xdc>
 8003070:	2300      	movs	r3, #0
 8003072:	6053      	str	r3, [r2, #4]
 8003074:	e7de      	b.n	8003034 <_malloc_r+0xa8>
 8003076:	230c      	movs	r3, #12
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	4630      	mov	r0, r6
 800307c:	f000 f80c 	bl	8003098 <__malloc_unlock>
 8003080:	e794      	b.n	8002fac <_malloc_r+0x20>
 8003082:	6005      	str	r5, [r0, #0]
 8003084:	e7d6      	b.n	8003034 <_malloc_r+0xa8>
 8003086:	bf00      	nop
 8003088:	2000025c 	.word	0x2000025c

0800308c <__malloc_lock>:
 800308c:	4801      	ldr	r0, [pc, #4]	@ (8003094 <__malloc_lock+0x8>)
 800308e:	f7ff bf0f 	b.w	8002eb0 <__retarget_lock_acquire_recursive>
 8003092:	bf00      	nop
 8003094:	20000254 	.word	0x20000254

08003098 <__malloc_unlock>:
 8003098:	4801      	ldr	r0, [pc, #4]	@ (80030a0 <__malloc_unlock+0x8>)
 800309a:	f7ff bf0a 	b.w	8002eb2 <__retarget_lock_release_recursive>
 800309e:	bf00      	nop
 80030a0:	20000254 	.word	0x20000254

080030a4 <__ssputs_r>:
 80030a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	688e      	ldr	r6, [r1, #8]
 80030aa:	461f      	mov	r7, r3
 80030ac:	42be      	cmp	r6, r7
 80030ae:	680b      	ldr	r3, [r1, #0]
 80030b0:	4682      	mov	sl, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	4690      	mov	r8, r2
 80030b6:	d82d      	bhi.n	8003114 <__ssputs_r+0x70>
 80030b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030c0:	d026      	beq.n	8003110 <__ssputs_r+0x6c>
 80030c2:	6965      	ldr	r5, [r4, #20]
 80030c4:	6909      	ldr	r1, [r1, #16]
 80030c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ca:	eba3 0901 	sub.w	r9, r3, r1
 80030ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030d2:	1c7b      	adds	r3, r7, #1
 80030d4:	444b      	add	r3, r9
 80030d6:	106d      	asrs	r5, r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	bf38      	it	cc
 80030dc:	461d      	movcc	r5, r3
 80030de:	0553      	lsls	r3, r2, #21
 80030e0:	d527      	bpl.n	8003132 <__ssputs_r+0x8e>
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7ff ff52 	bl	8002f8c <_malloc_r>
 80030e8:	4606      	mov	r6, r0
 80030ea:	b360      	cbz	r0, 8003146 <__ssputs_r+0xa2>
 80030ec:	6921      	ldr	r1, [r4, #16]
 80030ee:	464a      	mov	r2, r9
 80030f0:	f000 fae6 	bl	80036c0 <memcpy>
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fe:	81a3      	strh	r3, [r4, #12]
 8003100:	6126      	str	r6, [r4, #16]
 8003102:	6165      	str	r5, [r4, #20]
 8003104:	444e      	add	r6, r9
 8003106:	eba5 0509 	sub.w	r5, r5, r9
 800310a:	6026      	str	r6, [r4, #0]
 800310c:	60a5      	str	r5, [r4, #8]
 800310e:	463e      	mov	r6, r7
 8003110:	42be      	cmp	r6, r7
 8003112:	d900      	bls.n	8003116 <__ssputs_r+0x72>
 8003114:	463e      	mov	r6, r7
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	4632      	mov	r2, r6
 800311a:	4641      	mov	r1, r8
 800311c:	f000 faa6 	bl	800366c <memmove>
 8003120:	68a3      	ldr	r3, [r4, #8]
 8003122:	1b9b      	subs	r3, r3, r6
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	4433      	add	r3, r6
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	2000      	movs	r0, #0
 800312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003132:	462a      	mov	r2, r5
 8003134:	f000 fad2 	bl	80036dc <_realloc_r>
 8003138:	4606      	mov	r6, r0
 800313a:	2800      	cmp	r0, #0
 800313c:	d1e0      	bne.n	8003100 <__ssputs_r+0x5c>
 800313e:	6921      	ldr	r1, [r4, #16]
 8003140:	4650      	mov	r0, sl
 8003142:	f7ff feb7 	bl	8002eb4 <_free_r>
 8003146:	230c      	movs	r3, #12
 8003148:	f8ca 3000 	str.w	r3, [sl]
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003152:	81a3      	strh	r3, [r4, #12]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003158:	e7e9      	b.n	800312e <__ssputs_r+0x8a>
	...

0800315c <_svfiprintf_r>:
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	4698      	mov	r8, r3
 8003162:	898b      	ldrh	r3, [r1, #12]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	b09d      	sub	sp, #116	@ 0x74
 8003168:	4607      	mov	r7, r0
 800316a:	460d      	mov	r5, r1
 800316c:	4614      	mov	r4, r2
 800316e:	d510      	bpl.n	8003192 <_svfiprintf_r+0x36>
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	b973      	cbnz	r3, 8003192 <_svfiprintf_r+0x36>
 8003174:	2140      	movs	r1, #64	@ 0x40
 8003176:	f7ff ff09 	bl	8002f8c <_malloc_r>
 800317a:	6028      	str	r0, [r5, #0]
 800317c:	6128      	str	r0, [r5, #16]
 800317e:	b930      	cbnz	r0, 800318e <_svfiprintf_r+0x32>
 8003180:	230c      	movs	r3, #12
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003188:	b01d      	add	sp, #116	@ 0x74
 800318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318e:	2340      	movs	r3, #64	@ 0x40
 8003190:	616b      	str	r3, [r5, #20]
 8003192:	2300      	movs	r3, #0
 8003194:	9309      	str	r3, [sp, #36]	@ 0x24
 8003196:	2320      	movs	r3, #32
 8003198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800319c:	f8cd 800c 	str.w	r8, [sp, #12]
 80031a0:	2330      	movs	r3, #48	@ 0x30
 80031a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003340 <_svfiprintf_r+0x1e4>
 80031a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031aa:	f04f 0901 	mov.w	r9, #1
 80031ae:	4623      	mov	r3, r4
 80031b0:	469a      	mov	sl, r3
 80031b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031b6:	b10a      	cbz	r2, 80031bc <_svfiprintf_r+0x60>
 80031b8:	2a25      	cmp	r2, #37	@ 0x25
 80031ba:	d1f9      	bne.n	80031b0 <_svfiprintf_r+0x54>
 80031bc:	ebba 0b04 	subs.w	fp, sl, r4
 80031c0:	d00b      	beq.n	80031da <_svfiprintf_r+0x7e>
 80031c2:	465b      	mov	r3, fp
 80031c4:	4622      	mov	r2, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	4638      	mov	r0, r7
 80031ca:	f7ff ff6b 	bl	80030a4 <__ssputs_r>
 80031ce:	3001      	adds	r0, #1
 80031d0:	f000 80a7 	beq.w	8003322 <_svfiprintf_r+0x1c6>
 80031d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031d6:	445a      	add	r2, fp
 80031d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80031da:	f89a 3000 	ldrb.w	r3, [sl]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 809f 	beq.w	8003322 <_svfiprintf_r+0x1c6>
 80031e4:	2300      	movs	r3, #0
 80031e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ee:	f10a 0a01 	add.w	sl, sl, #1
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	9307      	str	r3, [sp, #28]
 80031f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80031fc:	4654      	mov	r4, sl
 80031fe:	2205      	movs	r2, #5
 8003200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003204:	484e      	ldr	r0, [pc, #312]	@ (8003340 <_svfiprintf_r+0x1e4>)
 8003206:	f7fd f803 	bl	8000210 <memchr>
 800320a:	9a04      	ldr	r2, [sp, #16]
 800320c:	b9d8      	cbnz	r0, 8003246 <_svfiprintf_r+0xea>
 800320e:	06d0      	lsls	r0, r2, #27
 8003210:	bf44      	itt	mi
 8003212:	2320      	movmi	r3, #32
 8003214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003218:	0711      	lsls	r1, r2, #28
 800321a:	bf44      	itt	mi
 800321c:	232b      	movmi	r3, #43	@ 0x2b
 800321e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003222:	f89a 3000 	ldrb.w	r3, [sl]
 8003226:	2b2a      	cmp	r3, #42	@ 0x2a
 8003228:	d015      	beq.n	8003256 <_svfiprintf_r+0xfa>
 800322a:	9a07      	ldr	r2, [sp, #28]
 800322c:	4654      	mov	r4, sl
 800322e:	2000      	movs	r0, #0
 8003230:	f04f 0c0a 	mov.w	ip, #10
 8003234:	4621      	mov	r1, r4
 8003236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800323a:	3b30      	subs	r3, #48	@ 0x30
 800323c:	2b09      	cmp	r3, #9
 800323e:	d94b      	bls.n	80032d8 <_svfiprintf_r+0x17c>
 8003240:	b1b0      	cbz	r0, 8003270 <_svfiprintf_r+0x114>
 8003242:	9207      	str	r2, [sp, #28]
 8003244:	e014      	b.n	8003270 <_svfiprintf_r+0x114>
 8003246:	eba0 0308 	sub.w	r3, r0, r8
 800324a:	fa09 f303 	lsl.w	r3, r9, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	46a2      	mov	sl, r4
 8003254:	e7d2      	b.n	80031fc <_svfiprintf_r+0xa0>
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	1d19      	adds	r1, r3, #4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	9103      	str	r1, [sp, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfbb      	ittet	lt
 8003262:	425b      	neglt	r3, r3
 8003264:	f042 0202 	orrlt.w	r2, r2, #2
 8003268:	9307      	strge	r3, [sp, #28]
 800326a:	9307      	strlt	r3, [sp, #28]
 800326c:	bfb8      	it	lt
 800326e:	9204      	strlt	r2, [sp, #16]
 8003270:	7823      	ldrb	r3, [r4, #0]
 8003272:	2b2e      	cmp	r3, #46	@ 0x2e
 8003274:	d10a      	bne.n	800328c <_svfiprintf_r+0x130>
 8003276:	7863      	ldrb	r3, [r4, #1]
 8003278:	2b2a      	cmp	r3, #42	@ 0x2a
 800327a:	d132      	bne.n	80032e2 <_svfiprintf_r+0x186>
 800327c:	9b03      	ldr	r3, [sp, #12]
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	9203      	str	r2, [sp, #12]
 8003284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003288:	3402      	adds	r4, #2
 800328a:	9305      	str	r3, [sp, #20]
 800328c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003350 <_svfiprintf_r+0x1f4>
 8003290:	7821      	ldrb	r1, [r4, #0]
 8003292:	2203      	movs	r2, #3
 8003294:	4650      	mov	r0, sl
 8003296:	f7fc ffbb 	bl	8000210 <memchr>
 800329a:	b138      	cbz	r0, 80032ac <_svfiprintf_r+0x150>
 800329c:	9b04      	ldr	r3, [sp, #16]
 800329e:	eba0 000a 	sub.w	r0, r0, sl
 80032a2:	2240      	movs	r2, #64	@ 0x40
 80032a4:	4082      	lsls	r2, r0
 80032a6:	4313      	orrs	r3, r2
 80032a8:	3401      	adds	r4, #1
 80032aa:	9304      	str	r3, [sp, #16]
 80032ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b0:	4824      	ldr	r0, [pc, #144]	@ (8003344 <_svfiprintf_r+0x1e8>)
 80032b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032b6:	2206      	movs	r2, #6
 80032b8:	f7fc ffaa 	bl	8000210 <memchr>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d036      	beq.n	800332e <_svfiprintf_r+0x1d2>
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <_svfiprintf_r+0x1ec>)
 80032c2:	bb1b      	cbnz	r3, 800330c <_svfiprintf_r+0x1b0>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	3307      	adds	r3, #7
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	3308      	adds	r3, #8
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032d2:	4433      	add	r3, r6
 80032d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032d6:	e76a      	b.n	80031ae <_svfiprintf_r+0x52>
 80032d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032dc:	460c      	mov	r4, r1
 80032de:	2001      	movs	r0, #1
 80032e0:	e7a8      	b.n	8003234 <_svfiprintf_r+0xd8>
 80032e2:	2300      	movs	r3, #0
 80032e4:	3401      	adds	r4, #1
 80032e6:	9305      	str	r3, [sp, #20]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 0c0a 	mov.w	ip, #10
 80032ee:	4620      	mov	r0, r4
 80032f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f4:	3a30      	subs	r2, #48	@ 0x30
 80032f6:	2a09      	cmp	r2, #9
 80032f8:	d903      	bls.n	8003302 <_svfiprintf_r+0x1a6>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0c6      	beq.n	800328c <_svfiprintf_r+0x130>
 80032fe:	9105      	str	r1, [sp, #20]
 8003300:	e7c4      	b.n	800328c <_svfiprintf_r+0x130>
 8003302:	fb0c 2101 	mla	r1, ip, r1, r2
 8003306:	4604      	mov	r4, r0
 8003308:	2301      	movs	r3, #1
 800330a:	e7f0      	b.n	80032ee <_svfiprintf_r+0x192>
 800330c:	ab03      	add	r3, sp, #12
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	462a      	mov	r2, r5
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <_svfiprintf_r+0x1f0>)
 8003314:	a904      	add	r1, sp, #16
 8003316:	4638      	mov	r0, r7
 8003318:	f3af 8000 	nop.w
 800331c:	1c42      	adds	r2, r0, #1
 800331e:	4606      	mov	r6, r0
 8003320:	d1d6      	bne.n	80032d0 <_svfiprintf_r+0x174>
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	065b      	lsls	r3, r3, #25
 8003326:	f53f af2d 	bmi.w	8003184 <_svfiprintf_r+0x28>
 800332a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800332c:	e72c      	b.n	8003188 <_svfiprintf_r+0x2c>
 800332e:	ab03      	add	r3, sp, #12
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	462a      	mov	r2, r5
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <_svfiprintf_r+0x1f0>)
 8003336:	a904      	add	r1, sp, #16
 8003338:	4638      	mov	r0, r7
 800333a:	f000 f879 	bl	8003430 <_printf_i>
 800333e:	e7ed      	b.n	800331c <_svfiprintf_r+0x1c0>
 8003340:	08003790 	.word	0x08003790
 8003344:	0800379a 	.word	0x0800379a
 8003348:	00000000 	.word	0x00000000
 800334c:	080030a5 	.word	0x080030a5
 8003350:	08003796 	.word	0x08003796

08003354 <_printf_common>:
 8003354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003358:	4616      	mov	r6, r2
 800335a:	4698      	mov	r8, r3
 800335c:	688a      	ldr	r2, [r1, #8]
 800335e:	690b      	ldr	r3, [r1, #16]
 8003360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003364:	4293      	cmp	r3, r2
 8003366:	bfb8      	it	lt
 8003368:	4613      	movlt	r3, r2
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003370:	4607      	mov	r7, r0
 8003372:	460c      	mov	r4, r1
 8003374:	b10a      	cbz	r2, 800337a <_printf_common+0x26>
 8003376:	3301      	adds	r3, #1
 8003378:	6033      	str	r3, [r6, #0]
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	0699      	lsls	r1, r3, #26
 800337e:	bf42      	ittt	mi
 8003380:	6833      	ldrmi	r3, [r6, #0]
 8003382:	3302      	addmi	r3, #2
 8003384:	6033      	strmi	r3, [r6, #0]
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	f015 0506 	ands.w	r5, r5, #6
 800338c:	d106      	bne.n	800339c <_printf_common+0x48>
 800338e:	f104 0a19 	add.w	sl, r4, #25
 8003392:	68e3      	ldr	r3, [r4, #12]
 8003394:	6832      	ldr	r2, [r6, #0]
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	42ab      	cmp	r3, r5
 800339a:	dc26      	bgt.n	80033ea <_printf_common+0x96>
 800339c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	3b00      	subs	r3, #0
 80033a4:	bf18      	it	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	0692      	lsls	r2, r2, #26
 80033aa:	d42b      	bmi.n	8003404 <_printf_common+0xb0>
 80033ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033b0:	4641      	mov	r1, r8
 80033b2:	4638      	mov	r0, r7
 80033b4:	47c8      	blx	r9
 80033b6:	3001      	adds	r0, #1
 80033b8:	d01e      	beq.n	80033f8 <_printf_common+0xa4>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	6922      	ldr	r2, [r4, #16]
 80033be:	f003 0306 	and.w	r3, r3, #6
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf02      	ittt	eq
 80033c6:	68e5      	ldreq	r5, [r4, #12]
 80033c8:	6833      	ldreq	r3, [r6, #0]
 80033ca:	1aed      	subeq	r5, r5, r3
 80033cc:	68a3      	ldr	r3, [r4, #8]
 80033ce:	bf0c      	ite	eq
 80033d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d4:	2500      	movne	r5, #0
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bfc4      	itt	gt
 80033da:	1a9b      	subgt	r3, r3, r2
 80033dc:	18ed      	addgt	r5, r5, r3
 80033de:	2600      	movs	r6, #0
 80033e0:	341a      	adds	r4, #26
 80033e2:	42b5      	cmp	r5, r6
 80033e4:	d11a      	bne.n	800341c <_printf_common+0xc8>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e008      	b.n	80033fc <_printf_common+0xa8>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4652      	mov	r2, sl
 80033ee:	4641      	mov	r1, r8
 80033f0:	4638      	mov	r0, r7
 80033f2:	47c8      	blx	r9
 80033f4:	3001      	adds	r0, #1
 80033f6:	d103      	bne.n	8003400 <_printf_common+0xac>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003400:	3501      	adds	r5, #1
 8003402:	e7c6      	b.n	8003392 <_printf_common+0x3e>
 8003404:	18e1      	adds	r1, r4, r3
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	2030      	movs	r0, #48	@ 0x30
 800340a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800340e:	4422      	add	r2, r4
 8003410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003418:	3302      	adds	r3, #2
 800341a:	e7c7      	b.n	80033ac <_printf_common+0x58>
 800341c:	2301      	movs	r3, #1
 800341e:	4622      	mov	r2, r4
 8003420:	4641      	mov	r1, r8
 8003422:	4638      	mov	r0, r7
 8003424:	47c8      	blx	r9
 8003426:	3001      	adds	r0, #1
 8003428:	d0e6      	beq.n	80033f8 <_printf_common+0xa4>
 800342a:	3601      	adds	r6, #1
 800342c:	e7d9      	b.n	80033e2 <_printf_common+0x8e>
	...

08003430 <_printf_i>:
 8003430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	7e0f      	ldrb	r7, [r1, #24]
 8003436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003438:	2f78      	cmp	r7, #120	@ 0x78
 800343a:	4691      	mov	r9, r2
 800343c:	4680      	mov	r8, r0
 800343e:	460c      	mov	r4, r1
 8003440:	469a      	mov	sl, r3
 8003442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003446:	d807      	bhi.n	8003458 <_printf_i+0x28>
 8003448:	2f62      	cmp	r7, #98	@ 0x62
 800344a:	d80a      	bhi.n	8003462 <_printf_i+0x32>
 800344c:	2f00      	cmp	r7, #0
 800344e:	f000 80d1 	beq.w	80035f4 <_printf_i+0x1c4>
 8003452:	2f58      	cmp	r7, #88	@ 0x58
 8003454:	f000 80b8 	beq.w	80035c8 <_printf_i+0x198>
 8003458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800345c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003460:	e03a      	b.n	80034d8 <_printf_i+0xa8>
 8003462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003466:	2b15      	cmp	r3, #21
 8003468:	d8f6      	bhi.n	8003458 <_printf_i+0x28>
 800346a:	a101      	add	r1, pc, #4	@ (adr r1, 8003470 <_printf_i+0x40>)
 800346c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003470:	080034c9 	.word	0x080034c9
 8003474:	080034dd 	.word	0x080034dd
 8003478:	08003459 	.word	0x08003459
 800347c:	08003459 	.word	0x08003459
 8003480:	08003459 	.word	0x08003459
 8003484:	08003459 	.word	0x08003459
 8003488:	080034dd 	.word	0x080034dd
 800348c:	08003459 	.word	0x08003459
 8003490:	08003459 	.word	0x08003459
 8003494:	08003459 	.word	0x08003459
 8003498:	08003459 	.word	0x08003459
 800349c:	080035db 	.word	0x080035db
 80034a0:	08003507 	.word	0x08003507
 80034a4:	08003595 	.word	0x08003595
 80034a8:	08003459 	.word	0x08003459
 80034ac:	08003459 	.word	0x08003459
 80034b0:	080035fd 	.word	0x080035fd
 80034b4:	08003459 	.word	0x08003459
 80034b8:	08003507 	.word	0x08003507
 80034bc:	08003459 	.word	0x08003459
 80034c0:	08003459 	.word	0x08003459
 80034c4:	0800359d 	.word	0x0800359d
 80034c8:	6833      	ldr	r3, [r6, #0]
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6032      	str	r2, [r6, #0]
 80034d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034d8:	2301      	movs	r3, #1
 80034da:	e09c      	b.n	8003616 <_printf_i+0x1e6>
 80034dc:	6833      	ldr	r3, [r6, #0]
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	1d19      	adds	r1, r3, #4
 80034e2:	6031      	str	r1, [r6, #0]
 80034e4:	0606      	lsls	r6, r0, #24
 80034e6:	d501      	bpl.n	80034ec <_printf_i+0xbc>
 80034e8:	681d      	ldr	r5, [r3, #0]
 80034ea:	e003      	b.n	80034f4 <_printf_i+0xc4>
 80034ec:	0645      	lsls	r5, r0, #25
 80034ee:	d5fb      	bpl.n	80034e8 <_printf_i+0xb8>
 80034f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034f4:	2d00      	cmp	r5, #0
 80034f6:	da03      	bge.n	8003500 <_printf_i+0xd0>
 80034f8:	232d      	movs	r3, #45	@ 0x2d
 80034fa:	426d      	negs	r5, r5
 80034fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003500:	4858      	ldr	r0, [pc, #352]	@ (8003664 <_printf_i+0x234>)
 8003502:	230a      	movs	r3, #10
 8003504:	e011      	b.n	800352a <_printf_i+0xfa>
 8003506:	6821      	ldr	r1, [r4, #0]
 8003508:	6833      	ldr	r3, [r6, #0]
 800350a:	0608      	lsls	r0, r1, #24
 800350c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003510:	d402      	bmi.n	8003518 <_printf_i+0xe8>
 8003512:	0649      	lsls	r1, r1, #25
 8003514:	bf48      	it	mi
 8003516:	b2ad      	uxthmi	r5, r5
 8003518:	2f6f      	cmp	r7, #111	@ 0x6f
 800351a:	4852      	ldr	r0, [pc, #328]	@ (8003664 <_printf_i+0x234>)
 800351c:	6033      	str	r3, [r6, #0]
 800351e:	bf14      	ite	ne
 8003520:	230a      	movne	r3, #10
 8003522:	2308      	moveq	r3, #8
 8003524:	2100      	movs	r1, #0
 8003526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800352a:	6866      	ldr	r6, [r4, #4]
 800352c:	60a6      	str	r6, [r4, #8]
 800352e:	2e00      	cmp	r6, #0
 8003530:	db05      	blt.n	800353e <_printf_i+0x10e>
 8003532:	6821      	ldr	r1, [r4, #0]
 8003534:	432e      	orrs	r6, r5
 8003536:	f021 0104 	bic.w	r1, r1, #4
 800353a:	6021      	str	r1, [r4, #0]
 800353c:	d04b      	beq.n	80035d6 <_printf_i+0x1a6>
 800353e:	4616      	mov	r6, r2
 8003540:	fbb5 f1f3 	udiv	r1, r5, r3
 8003544:	fb03 5711 	mls	r7, r3, r1, r5
 8003548:	5dc7      	ldrb	r7, [r0, r7]
 800354a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800354e:	462f      	mov	r7, r5
 8003550:	42bb      	cmp	r3, r7
 8003552:	460d      	mov	r5, r1
 8003554:	d9f4      	bls.n	8003540 <_printf_i+0x110>
 8003556:	2b08      	cmp	r3, #8
 8003558:	d10b      	bne.n	8003572 <_printf_i+0x142>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	07df      	lsls	r7, r3, #31
 800355e:	d508      	bpl.n	8003572 <_printf_i+0x142>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	6861      	ldr	r1, [r4, #4]
 8003564:	4299      	cmp	r1, r3
 8003566:	bfde      	ittt	le
 8003568:	2330      	movle	r3, #48	@ 0x30
 800356a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800356e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003572:	1b92      	subs	r2, r2, r6
 8003574:	6122      	str	r2, [r4, #16]
 8003576:	f8cd a000 	str.w	sl, [sp]
 800357a:	464b      	mov	r3, r9
 800357c:	aa03      	add	r2, sp, #12
 800357e:	4621      	mov	r1, r4
 8003580:	4640      	mov	r0, r8
 8003582:	f7ff fee7 	bl	8003354 <_printf_common>
 8003586:	3001      	adds	r0, #1
 8003588:	d14a      	bne.n	8003620 <_printf_i+0x1f0>
 800358a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800358e:	b004      	add	sp, #16
 8003590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	f043 0320 	orr.w	r3, r3, #32
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	4832      	ldr	r0, [pc, #200]	@ (8003668 <_printf_i+0x238>)
 800359e:	2778      	movs	r7, #120	@ 0x78
 80035a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	6831      	ldr	r1, [r6, #0]
 80035a8:	061f      	lsls	r7, r3, #24
 80035aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80035ae:	d402      	bmi.n	80035b6 <_printf_i+0x186>
 80035b0:	065f      	lsls	r7, r3, #25
 80035b2:	bf48      	it	mi
 80035b4:	b2ad      	uxthmi	r5, r5
 80035b6:	6031      	str	r1, [r6, #0]
 80035b8:	07d9      	lsls	r1, r3, #31
 80035ba:	bf44      	itt	mi
 80035bc:	f043 0320 	orrmi.w	r3, r3, #32
 80035c0:	6023      	strmi	r3, [r4, #0]
 80035c2:	b11d      	cbz	r5, 80035cc <_printf_i+0x19c>
 80035c4:	2310      	movs	r3, #16
 80035c6:	e7ad      	b.n	8003524 <_printf_i+0xf4>
 80035c8:	4826      	ldr	r0, [pc, #152]	@ (8003664 <_printf_i+0x234>)
 80035ca:	e7e9      	b.n	80035a0 <_printf_i+0x170>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f023 0320 	bic.w	r3, r3, #32
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	e7f6      	b.n	80035c4 <_printf_i+0x194>
 80035d6:	4616      	mov	r6, r2
 80035d8:	e7bd      	b.n	8003556 <_printf_i+0x126>
 80035da:	6833      	ldr	r3, [r6, #0]
 80035dc:	6825      	ldr	r5, [r4, #0]
 80035de:	6961      	ldr	r1, [r4, #20]
 80035e0:	1d18      	adds	r0, r3, #4
 80035e2:	6030      	str	r0, [r6, #0]
 80035e4:	062e      	lsls	r6, r5, #24
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	d501      	bpl.n	80035ee <_printf_i+0x1be>
 80035ea:	6019      	str	r1, [r3, #0]
 80035ec:	e002      	b.n	80035f4 <_printf_i+0x1c4>
 80035ee:	0668      	lsls	r0, r5, #25
 80035f0:	d5fb      	bpl.n	80035ea <_printf_i+0x1ba>
 80035f2:	8019      	strh	r1, [r3, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	6123      	str	r3, [r4, #16]
 80035f8:	4616      	mov	r6, r2
 80035fa:	e7bc      	b.n	8003576 <_printf_i+0x146>
 80035fc:	6833      	ldr	r3, [r6, #0]
 80035fe:	1d1a      	adds	r2, r3, #4
 8003600:	6032      	str	r2, [r6, #0]
 8003602:	681e      	ldr	r6, [r3, #0]
 8003604:	6862      	ldr	r2, [r4, #4]
 8003606:	2100      	movs	r1, #0
 8003608:	4630      	mov	r0, r6
 800360a:	f7fc fe01 	bl	8000210 <memchr>
 800360e:	b108      	cbz	r0, 8003614 <_printf_i+0x1e4>
 8003610:	1b80      	subs	r0, r0, r6
 8003612:	6060      	str	r0, [r4, #4]
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	2300      	movs	r3, #0
 800361a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800361e:	e7aa      	b.n	8003576 <_printf_i+0x146>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	4632      	mov	r2, r6
 8003624:	4649      	mov	r1, r9
 8003626:	4640      	mov	r0, r8
 8003628:	47d0      	blx	sl
 800362a:	3001      	adds	r0, #1
 800362c:	d0ad      	beq.n	800358a <_printf_i+0x15a>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	079b      	lsls	r3, r3, #30
 8003632:	d413      	bmi.n	800365c <_printf_i+0x22c>
 8003634:	68e0      	ldr	r0, [r4, #12]
 8003636:	9b03      	ldr	r3, [sp, #12]
 8003638:	4298      	cmp	r0, r3
 800363a:	bfb8      	it	lt
 800363c:	4618      	movlt	r0, r3
 800363e:	e7a6      	b.n	800358e <_printf_i+0x15e>
 8003640:	2301      	movs	r3, #1
 8003642:	4632      	mov	r2, r6
 8003644:	4649      	mov	r1, r9
 8003646:	4640      	mov	r0, r8
 8003648:	47d0      	blx	sl
 800364a:	3001      	adds	r0, #1
 800364c:	d09d      	beq.n	800358a <_printf_i+0x15a>
 800364e:	3501      	adds	r5, #1
 8003650:	68e3      	ldr	r3, [r4, #12]
 8003652:	9903      	ldr	r1, [sp, #12]
 8003654:	1a5b      	subs	r3, r3, r1
 8003656:	42ab      	cmp	r3, r5
 8003658:	dcf2      	bgt.n	8003640 <_printf_i+0x210>
 800365a:	e7eb      	b.n	8003634 <_printf_i+0x204>
 800365c:	2500      	movs	r5, #0
 800365e:	f104 0619 	add.w	r6, r4, #25
 8003662:	e7f5      	b.n	8003650 <_printf_i+0x220>
 8003664:	080037a1 	.word	0x080037a1
 8003668:	080037b2 	.word	0x080037b2

0800366c <memmove>:
 800366c:	4288      	cmp	r0, r1
 800366e:	b510      	push	{r4, lr}
 8003670:	eb01 0402 	add.w	r4, r1, r2
 8003674:	d902      	bls.n	800367c <memmove+0x10>
 8003676:	4284      	cmp	r4, r0
 8003678:	4623      	mov	r3, r4
 800367a:	d807      	bhi.n	800368c <memmove+0x20>
 800367c:	1e43      	subs	r3, r0, #1
 800367e:	42a1      	cmp	r1, r4
 8003680:	d008      	beq.n	8003694 <memmove+0x28>
 8003682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800368a:	e7f8      	b.n	800367e <memmove+0x12>
 800368c:	4402      	add	r2, r0
 800368e:	4601      	mov	r1, r0
 8003690:	428a      	cmp	r2, r1
 8003692:	d100      	bne.n	8003696 <memmove+0x2a>
 8003694:	bd10      	pop	{r4, pc}
 8003696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800369a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800369e:	e7f7      	b.n	8003690 <memmove+0x24>

080036a0 <_sbrk_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4d06      	ldr	r5, [pc, #24]	@ (80036bc <_sbrk_r+0x1c>)
 80036a4:	2300      	movs	r3, #0
 80036a6:	4604      	mov	r4, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	602b      	str	r3, [r5, #0]
 80036ac:	f7fd f980 	bl	80009b0 <_sbrk>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_sbrk_r+0x1a>
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_sbrk_r+0x1a>
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	20000250 	.word	0x20000250

080036c0 <memcpy>:
 80036c0:	440a      	add	r2, r1
 80036c2:	4291      	cmp	r1, r2
 80036c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80036c8:	d100      	bne.n	80036cc <memcpy+0xc>
 80036ca:	4770      	bx	lr
 80036cc:	b510      	push	{r4, lr}
 80036ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036d6:	4291      	cmp	r1, r2
 80036d8:	d1f9      	bne.n	80036ce <memcpy+0xe>
 80036da:	bd10      	pop	{r4, pc}

080036dc <_realloc_r>:
 80036dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e0:	4607      	mov	r7, r0
 80036e2:	4614      	mov	r4, r2
 80036e4:	460d      	mov	r5, r1
 80036e6:	b921      	cbnz	r1, 80036f2 <_realloc_r+0x16>
 80036e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	4611      	mov	r1, r2
 80036ee:	f7ff bc4d 	b.w	8002f8c <_malloc_r>
 80036f2:	b92a      	cbnz	r2, 8003700 <_realloc_r+0x24>
 80036f4:	f7ff fbde 	bl	8002eb4 <_free_r>
 80036f8:	4625      	mov	r5, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003700:	f000 f81a 	bl	8003738 <_malloc_usable_size_r>
 8003704:	4284      	cmp	r4, r0
 8003706:	4606      	mov	r6, r0
 8003708:	d802      	bhi.n	8003710 <_realloc_r+0x34>
 800370a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800370e:	d8f4      	bhi.n	80036fa <_realloc_r+0x1e>
 8003710:	4621      	mov	r1, r4
 8003712:	4638      	mov	r0, r7
 8003714:	f7ff fc3a 	bl	8002f8c <_malloc_r>
 8003718:	4680      	mov	r8, r0
 800371a:	b908      	cbnz	r0, 8003720 <_realloc_r+0x44>
 800371c:	4645      	mov	r5, r8
 800371e:	e7ec      	b.n	80036fa <_realloc_r+0x1e>
 8003720:	42b4      	cmp	r4, r6
 8003722:	4622      	mov	r2, r4
 8003724:	4629      	mov	r1, r5
 8003726:	bf28      	it	cs
 8003728:	4632      	movcs	r2, r6
 800372a:	f7ff ffc9 	bl	80036c0 <memcpy>
 800372e:	4629      	mov	r1, r5
 8003730:	4638      	mov	r0, r7
 8003732:	f7ff fbbf 	bl	8002eb4 <_free_r>
 8003736:	e7f1      	b.n	800371c <_realloc_r+0x40>

08003738 <_malloc_usable_size_r>:
 8003738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373c:	1f18      	subs	r0, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfbc      	itt	lt
 8003742:	580b      	ldrlt	r3, [r1, r0]
 8003744:	18c0      	addlt	r0, r0, r3
 8003746:	4770      	bx	lr

08003748 <_init>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	bf00      	nop
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr

08003754 <_fini>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr
